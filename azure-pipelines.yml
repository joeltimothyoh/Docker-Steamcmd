# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
  - none

variables:
  IMAGE_NAME: 'steamcmd'

jobs:
- job: Linux
  pool:
    vmImage: 'ubuntu-16.04'
  variables:
    OS: 'ubuntu'
    OS_VARIANT: '16.04'
    OS_VARIANT_ARCHIVE: 'xenial-20181005'
  strategy:
    matrix:
      Minimal:
        VARIANT: 'minimal'
      Git:
        VARIANT: 'git'
        LATEST: 'true'
  workspace:
    clean: all
  continueOnError: false
  timeoutInMinutes: 20
  steps:
  - script: |
      whoami
      cat /etc/*release
      lscpu
      df -h
      free
      docker info
      docker version
    displayName: 'System Info'
  - script: |
      REPOSITORY="${REGISTRY_NAMESPACE}/${IMAGE_NAME}"
      REPOSITORY_PUSH="${REGISTRY_NAMESPACE_PUSH}/${IMAGE_NAME}"

      echo "${REGISTRY_PASSWORD}" | docker login -u "${REGISTRY_USER}" --password-stdin

      # Set job-scoped variables
      echo "##vso[task.setvariable variable=REPOSITORY]${REPOSITORY}"
      echo "##vso[task.setvariable variable=REPOSITORY_PUSH]${REPOSITORY_PUSH}"
    env:
      REGISTRY_PASSWORD: $(REGISTRY_PASSWORD)
    displayName: 'Before Script'
  - script: |
      set -e
      # Tag the defined os archive image as the os base image to be used for build
      if [ -n "${OS_VARIANT_ARCHIVE}" ]; then
          docker pull "${OS}:${OS_VARIANT_ARCHIVE}"
          docker tag "${OS}:${OS_VARIANT_ARCHIVE}" "${OS}:${OS_VARIANT}"
      fi
      echo; date
      # Build the steamcmd image
      docker pull "${REPOSITORY}:${VARIANT}" || true
      docker build \
          --cache-from "${REPOSITORY}:${VARIANT}" \
          -t "${REPOSITORY_PUSH}:${VARIANT}" \
          --label "game_distributor=steamcmd" \
          "${VARIANT}/"
      if [ "$LATEST" = 'true' ]; then
          docker tag "${REPOSITORY_PUSH}:${VARIANT}" "${REPOSITORY_PUSH}:latest"
      fi
      date
      echo; docker images
      echo; docker inspect "${REPOSITORY_PUSH}:${VARIANT}"
      echo; docker history "${REPOSITORY_PUSH}:${VARIANT}"
    displayName: 'Build SteamCMD Image'
  - script: |
      set -e
      # Test the image
      if [ ! "${NO_TEST}" = 'true' ]; then
          date
          docker run -t --rm "${REPOSITORY_PUSH}:${VARIANT}" /bin/bash -c "printenv && echo && ls -al && echo && exec steamcmd.sh +login anonymous +quit"
          date
      fi
    displayName: 'Test SteamCMD Image'
  - script: |
      set -e
      # Push the image
      if [ ! "${NO_PUSH}" = 'true' ]; then
          date
          docker push "${REPOSITORY_PUSH}"
          date
      fi
    displayName: 'Push SteamCMD Image'
  - script: |
      docker logout
    displayName: 'After Script'
    condition: always()